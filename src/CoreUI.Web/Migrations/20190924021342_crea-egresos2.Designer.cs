// <auto-generated />
using System;
using CoreUI.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreUI.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190924021342_crea-egresos2")]
    partial class creaegresos2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreUI.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Egresos", b =>
                {
                    b.Property<int>("EgresosId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Ajuste");

                    b.Property<byte>("Cancelado");

                    b.Property<decimal>("Cantidad");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100);

                    b.Property<string>("MotivoAjusteCancelacion")
                        .HasMaxLength(50);

                    b.Property<int>("SucursalesId");

                    b.Property<int>("TipoEgresosId");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("EgresosId");

                    b.HasIndex("SucursalesId");

                    b.HasIndex("TipoEgresosId");

                    b.ToTable("Egresos");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Empresas", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .HasMaxLength(256);

                    b.Property<int>("EstadoId");

                    b.Property<bool>("Estatus");

                    b.Property<int>("Id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(256);

                    b.Property<int>("PaisId");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50);

                    b.Property<string>("UsrAlta");

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod");

                    b.HasKey("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PaisId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Estados", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre");

                    b.Property<int>("PaisId");

                    b.HasKey("EstadoId");

                    b.HasIndex("PaisId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Habitaciones", b =>
                {
                    b.Property<int>("HabitacionesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaveHabitacion")
                        .HasMaxLength(10);

                    b.Property<bool>("Estatus");

                    b.Property<byte>("EstatusAdminitrador");

                    b.Property<int>("NoHabitacion");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100);

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(30);

                    b.Property<int>("SucursalesId");

                    b.Property<int>("TiposHabitacionID");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("HabitacionesId");

                    b.HasIndex("SucursalesId");

                    b.HasIndex("TiposHabitacionID");

                    b.ToTable("Habitaciones");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Ingresos", b =>
                {
                    b.Property<int>("IngresosId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Ajuste");

                    b.Property<byte>("Cancelado");

                    b.Property<decimal>("Cantidad");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100);

                    b.Property<string>("MotivoAjusteCancelacion")
                        .HasMaxLength(50);

                    b.Property<int>("SucursalesId");

                    b.Property<int>("TiposIngresosId");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("IngresosId");

                    b.HasIndex("SucursalesId");

                    b.HasIndex("TiposIngresosId");

                    b.ToTable("Ingresos");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Paises", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre");

                    b.HasKey("PaisId");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Sucursales", b =>
                {
                    b.Property<int>("SucursalesId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion")
                        .HasMaxLength(300);

                    b.Property<int>("EmpresaId");

                    b.Property<int>("EstadoId");

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre")
                        .HasMaxLength(256);

                    b.Property<int>("PaisId");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50);

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("SucursalesId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PaisId");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("CoreUI.Web.Models.SucursalesUsuarios", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("SucursalesId");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id", "SucursalesId");

                    b.HasIndex("SucursalesId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SucursalesUsuarios");
                });

            modelBuilder.Entity("CoreUI.Web.Models.TipoEgresos", b =>
                {
                    b.Property<int>("TipoEgresosId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100);

                    b.Property<int>("SucursalesId");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("TipoEgresosId");

                    b.HasIndex("SucursalesId");

                    b.ToTable("TipoEgresos");
                });

            modelBuilder.Entity("CoreUI.Web.Models.TiposHabitacion", b =>
                {
                    b.Property<int>("TiposHabitacionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<byte>("NoPesonas");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100);

                    b.Property<string>("NombreCorto")
                        .HasMaxLength(30);

                    b.Property<string>("Observaciones")
                        .HasMaxLength(300);

                    b.Property<decimal>("PrecioHabitacion");

                    b.Property<decimal>("PrecioNinioExtra");

                    b.Property<decimal>("PrecioPersonaExtra");

                    b.Property<int>("SucursalesId");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("TiposHabitacionID");

                    b.HasIndex("SucursalesId");

                    b.ToTable("TiposHabitacion");
                });

            modelBuilder.Entity("CoreUI.Web.Models.TiposIngresos", b =>
                {
                    b.Property<int>("TiposIngresosId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100);

                    b.Property<int>("SucursalesId");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("TiposIngresosId");

                    b.HasIndex("SucursalesId");

                    b.ToTable("TiposIngresos");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Role");

                    b.Property<string>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(256);

                    b.Property<byte>("UsrSuperAdminMax");

                    b.Property<byte>("UsuarioAdministrador");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Zonas", b =>
                {
                    b.Property<int>("ZonasId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100);

                    b.Property<bool>("Estatus");

                    b.Property<int>("SucursalesId");

                    b.Property<string>("UsrAlta")
                        .HasMaxLength(60);

                    b.Property<DateTime>("UsrFechaAlta");

                    b.Property<DateTime>("UsrFechaMod");

                    b.Property<string>("UsrMod")
                        .HasMaxLength(60);

                    b.HasKey("ZonasId");

                    b.HasIndex("SucursalesId");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoreUI.Web.Models.Egresos", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("Egresos")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.TipoEgresos")
                        .WithMany("Egresos")
                        .HasForeignKey("TipoEgresosId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.Empresas", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Estados", "Estados")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.Paises", "Paises")
                        .WithMany("Empresas")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.Estados", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Paises", "Paises")
                        .WithMany("Estados")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.Habitaciones", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("Habitaciones")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.TiposHabitacion")
                        .WithMany("Habitaciones")
                        .HasForeignKey("TiposHabitacionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.Ingresos", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("Ingresos")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.TiposIngresos")
                        .WithMany("Ingresos")
                        .HasForeignKey("TiposIngresosId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.Sucursales", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Empresas", "Empresas")
                        .WithMany("Sucursales")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.Estados")
                        .WithMany("Sucursales")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.Paises", "Paises")
                        .WithMany("Sucursales")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.SucursalesUsuarios", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales", "Sucursales")
                        .WithMany()
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("CoreUI.Web.Models.TipoEgresos", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("TipoEgresos")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.TiposHabitacion", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("TiposHabitacions")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.TiposIngresos", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("TiposIngresos")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreUI.Web.Models.Zonas", b =>
                {
                    b.HasOne("CoreUI.Web.Models.Sucursales")
                        .WithMany("Zonas")
                        .HasForeignKey("SucursalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoreUI.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoreUI.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreUI.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoreUI.Web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
